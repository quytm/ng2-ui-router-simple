UI Router

----------------------------- Tutorials ----------------------------------------------------------

1. Hello world
- Tạo các Component
- Export ra các State cho từng Component: Có 3 thuộc tính: name, url, component
	E.g: 
		export const aboutState = {name: 'about', url: '/about', component: About};
- Trong file html hiển thị các component đó, ta thêm các router. 
	+ Trong đó, uiSref là link của router, nó tương tự href. Khi click vào uiSref thì nó sẽ tự động build href
	+ uiSrefActive = "active" -> router đang ở trạng thái state là active
	+ Quan trọng nhất là ViewPort <ui-view></ui-view>: nó sẽ làm nhiệm vụ hiển thị component, component hiển thị là component đang ở state là active
	E.g:
		<a uiSref="hello" uiSrefActive="active">Hello</a>
- Cuối cùng trong app.moudule (chứa NgModule):
	+ declarations: khai báo thêm các component vừa tạo ra ở trên
	+ imports: thêm UIRouterModule.forRoot(), trong đó chứa các state đã định nghĩa ở trên
		E.g: 
			UIRouterModule.forRoot({
				states: [helloState, aboutState],
				useHash: true
			})
			
2. Hello Solar System
- Điều hướng app sử dụng UI-Router State Visualizer để hiển thị state hiện tại
- UIRouter Config: Config một số điều kiện trước tiên:
	+ Load trước dữ liệu
	+ Config router mặc định khi chưa có parameter nào được add vào link (ví dụ như tự động link đến trang welcome)
	+ (Option) Thêm ui-router-visualizer vào để hiển thị tree của router
- Tạo một service để lấy dữ liệu từ server (có promise)
- Resolve data: Xử lý trong khi định nghĩa state cho các router
	+ E.g:
		export const peopleState = {
			name: 'people',
			url: '/people',
			component: People,
			resolve: [
				{
					token: '_people',
					deps: [PeopleService],
					resolveFn: (peopleSvc) => peopleSvc.getAllPeople()
				}
			]
		};
	
	+ resolve chính là nơi để kéo dữ liệu về trước khi router được active: lấy dữ liệu từ server sử dụng server
	+ token: trùng với tên biến khi @Input (sẽ nói ở dưới)
	+ deps: khai báo service sử dụng để kéo dữ liệu
	+ resolveFn: kéo dữ liệu về, với tham số chính là service ở trên
	+ Dữ liệu sau khi lấy được sẽ đổ về Component, và component lấy nó bằng anotation: @Input (tên của nó trùng với tên của token)
- State Parameters: State có chứa parameter
	+ E.g: 
		export const personState = {
		  name: 'person',
		  url: '/people/:personId',
		  component: Person,
		  resolve: [
			{ 
			  token: 'person', 
			  deps: [Transition, PeopleService],
			  resolveFn: (trans, peopleSvc) => peopleSvc.getPerson(trans.params().personId)
			}
		  ]
		}
	+ name: cái này dùng chung cho tất cả các state có parameter khác nhau
	+ url: thêm :personId để phân biệt các person
	+ resolve: cũng làm nhiệm vụ kéo dữ liệu person về
	+ deps: ngoài service lấy dữ liệu còn có service làm nhiệm vụ lấy ra parameter, và đồng thời lấy thông tin của state
- Linking with params: link tới parameter trong list person
	E.g:
		<a uiSref="person" [uiParams]="{ personId: person.id }">
	+ Vẫn là router với state là person (trong uiSref)
	+ Nhưng cần có thêm uiParams để link tới person lựa chọn

3. Hello Galaxy
- Như phần 2 thì router people và person là 2 router có vai trò ngang hàng nhau
- Ở phần 3 này ta sẽ sử dụng UIRouter để phân cấp các router, cụ thể là router person sẽ là router con của people. Có nghĩa là: person sẽ được coi như navigator, khi click vào một person trên danh sách thì thông tin chi tiết của người đó sẽ hiển thị ngay bên cạnh của danh sách (bởi router của person). Dữ liệu chi tiết của person không cần phải request lại từ server mà lấy trực tiếp luôn từ state của router people.
- Thực hiện: ta không cần sửa nhiều từ code cũ.
	+ personState:
		. name: thêm tiền tố cho person đó là name của state cha của nó: 
			name: 'people.person'
		. url: (option) nên thêm /people/ vào url
		. resolve:
			_ token: vẫn là person
			_ deps: bỏ service (lấy dữ liệu chi tiết cho person) mà thay vào đó là token của state cha
	+ view (html):
		. uiSref cho từng person trong danh sách: trước đó chỉ là 'person', ta thêm tiền tố vào thành '.person', vì router person là con của people
		. Ngoài ra, ở cuối file html cũng cần thêm viewPort <ui-view> để hiển thị nội dung của person component














